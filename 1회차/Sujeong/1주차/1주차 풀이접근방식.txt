# 주식계산 접근방법 
 
index (0  1  2  3  4) + 1 >> 입출력 예의 1초,2초,3초,4초,5초 뒤 시점
default = [4, 3, 2, 1, 0] >> 4초후 끝, 3초후 끝, ...

price = [1, 2, 3, 2, 3]
return = [4, 3, 1, 1, 0]

1이랑 비교할 것 -> 2,3,2,3 -> 4초 후 까지 가격이 떨어지지 않음.
2이랑 비교할 것 -> 3,2,3 -> 3초 후 까지 가격이 떨어지지 않음.
3이랑 비교할 것 -> 2,3 -> 1초 후 가격이 '2'로 떨어짐.
2이랑 비교할 것 -> 3 -> 1초 후 까지 가격이 떨어지지 않음.
3이랑 비교할 것 -> x


# 기능개발 접근방법

progresses = [93%, 30%, 55%]
speeds = 하루에 [1%, 30%, 5%] 씩 개발됨.

(100 - progresses) / speeds = 을 올림 한 것이 'days'
(100 - 93) / 1 = 7 / 7 = 1
(100 - 30) / 30 = 70 / 30 = 2.333...
(100 - 55) / 9 = 45 / 9 = 5

days = [7d, 3d, 9d]
* days는 n일 후 기능이 개발됨.

days에서는 각 [7d, 3d, 9d]끼리 각 날짜들을 하나씩 다 비교
'위'에 과정들을 식으로 구현하려면 어떻게 해야할까? 저 식을 구현하면 되겠죠?


# 다리를 지나는 트럭

1. 다리는 '일차선' 이다.
   그렇기에 'Queue'를 사용하면 된다. > 처음 들어간 값이 가장 빨리 나오기 때문에!!
2. 다리의 길이의 단위는 1초이다. bridge_length가 2면 2칸건넌다. 100이면 100칸을 건넌다. 
   모든 트럭은 다리의 길이 만큼의 초가 경과한 후 다리를 지나갈 수 있다.
3. 한번에 올라갈 수 있는 트럭의 무게의합은 최대 다리가 견딜 수 있는 무게 weight 이다.
4. 건널 차가 없고 다리에도 차가 다 없어지는 시간을 return 한다. 
5. 사용할 것 : if문 / pop.append() << 괄호안 숫자가 n번째 인덱스 / 팝 해서 왼쪽에 있는 인덱스를 뺌.
